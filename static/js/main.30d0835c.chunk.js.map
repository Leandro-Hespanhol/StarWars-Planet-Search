{"version":3,"sources":["context/PlanetContext.jsx","data/columnArray.js","components/FilterBar.jsx","components/Table.jsx","hooks/usePlanetHook.jsx","context/PlanetProvider.jsx","App.js","index.js"],"names":["PlanetContext","createContext","columnArray","FilterBar","useContext","onInputChange","name","filterByName","onClassifcChange","createDeleteButton","onOrderFilterChange","columnCompValue","comparisson","sortFilter","buttonSortByOrder","columnClassf","onButtonFilter","classification","className","htmlFor","type","id","placeholder","data-testid","onChange","value","onSubmit","e","preventDefault","map","classOptions","key","compOptions","columns","onClick","Table","allPlanets","planet","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","edited","url","FetchAPIPlanets","useState","planets","setPlanets","setAllPlanets","URL","useEffect","a","fetch","then","resp","json","results","sort","b","fetchPlanets","PlanetProvider","children","nameInput","setNameInput","setClassification","setComparisson","column","comparison","setColumnCompValue","filterByNumericValues","filterValues","setFilterValues","filter","planetName","includes","filteredByClassification","forEach","filters","Number","order","orderBy","setOrderBy","setColumnClassf","ascDesc","setAscDesc","planetsOrderFilter","setPlanetsOrderFilter","clickCounter","setClickCounter","elem","event","target","deleteHere","find","parentNode","deleteFilteredButton","contextValue","columnClass","planetsSorted","hold","Provider","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.30d0835c.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst PlanetContext = createContext();\n\nexport default PlanetContext;\n","const columnArray = ['population', 'orbital_period', 'diameter', 'rotation_period',\n  'surface_water'];\n\nexport default columnArray;\n","import React, { useContext } from 'react';\nimport PlanetContext from '../context/PlanetContext';\nimport columnArray from '../data/columnArray';\n\nexport default function FilterBar() {\n  const { onInputChange, filterByName: { name },\n    onClassifcChange, createDeleteButton, onOrderFilterChange,\n    columnCompValue, comparisson, sortFilter, buttonSortByOrder, columnClassf,\n    onButtonFilter, classification } = useContext(PlanetContext);\n\n  return (\n    <div className=\"main-filter-div\">\n      <div className=\"name-filter-div\">\n        <h1>Star Wars Planet Search</h1>\n        <label htmlFor=\"name\">\n          <input\n            type=\"text\"\n            id=\"name\"\n            className=\"input-name\"\n            placeholder=\"Filtre por nome\"\n            data-testid=\"name-filter\"\n            onChange={ onInputChange }\n            value={ name }\n          />\n        </label>\n      </div>\n      <div className=\"category-filter-div\">\n        <h3>Filtre por comparação</h3>\n        <form\n          onSubmit={ (e) => {\n            e.preventDefault();\n            onButtonFilter();\n          } }\n        >\n          <label htmlFor=\"classificationSelect\">\n            <select\n              name=\"column\"\n              id=\"classificationSelect\"\n              data-testid=\"column-filter\"\n              onChange={ onClassifcChange }\n            >\n              {classification.map((classOptions) => (\n                <option\n                  key={ classOptions }\n                  value={ classOptions }\n                >\n                  {classOptions}\n                </option>\n              ))}\n            </select>\n          </label>\n          <label htmlFor=\"rangeSelector\">\n            <select\n              name=\"comparison\"\n              id=\"rangeSelector\"\n              data-testid=\"comparison-filter\"\n              onChange={ onClassifcChange }\n            >\n              {comparisson.map((compOptions) => (\n                <option\n                  key={ compOptions }\n                  onChange={ onClassifcChange }\n                >\n                  {compOptions}\n                </option>\n              ))}\n            </select>\n          </label>\n          <label htmlFor=\"number_filter\">\n            <input\n              type=\"number\"\n              name=\"value\"\n              id=\"number_filter\"\n              placeholder=\"valor\"\n              value={ columnCompValue.value }\n              data-testid=\"value-filter\"\n              onChange={ onClassifcChange }\n            />\n          </label>\n          <button\n            type=\"submit\"\n            data-testid=\"button-filter\"\n          >\n            Filtrar\n          </button>\n        </form>\n      </div>\n      <div>\n        {createDeleteButton()}\n      </div>\n      <div>\n        <h3>Ordene baseado na categoria</h3>\n        <select\n          name=\"column\"\n          data-testid=\"column-sort\"\n          onChange={ onOrderFilterChange }\n          value={ columnClassf }\n        >\n          {columnArray.map((columns) => (\n            <option key={ columns }>{columns}</option>\n          ))}\n        </select>\n        <label htmlFor=\"ASC\">\n          Ascendente\n          <input\n            type=\"radio\"\n            name=\"orderBy\"\n            id=\"ASC\"\n            data-testid=\"column-sort-input-asc\"\n            onChange={ sortFilter }\n          />\n        </label>\n        <label htmlFor=\"DESC\">\n          Descendente\n          <input\n            type=\"radio\"\n            name=\"orderBy\"\n            id=\"DESC\"\n            data-testid=\"column-sort-input-desc\"\n            onChange={ sortFilter }\n          />\n        </label>\n        <button\n          type=\"button\"\n          data-testid=\"column-sort-button\"\n          onClick={ () => buttonSortByOrder() }\n        >\n          Ordenar\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React, { useContext } from 'react';\nimport PlanetContext from '../context/PlanetContext';\nimport FilterBar from './FilterBar';\n\nexport default function Table() {\n  const { allPlanets } = useContext(PlanetContext);\n\n  return (\n    <div>\n      <FilterBar />\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Rotation Period</th>\n            <th>Orbital Period</th>\n            <th>Diameter</th>\n            <th>Climate</th>\n            <th>Gravity</th>\n            <th>Terrain</th>\n            <th>Surface Water</th>\n            <th>Population</th>\n            <th>Films</th>\n            <th>Created</th>\n            <th>Edited</th>\n            <th>Url</th>\n          </tr>\n        </thead>\n        <tbody>\n          {allPlanets.map((planet) => (\n            <tr key={ planet.name }>\n              <td data-testid=\"planet-name\">{ planet.name }</td>\n              <td>{ planet.rotation_period }</td>\n              <td>{ planet.orbital_period }</td>\n              <td>{ planet.diameter }</td>\n              <td>{ planet.climate }</td>\n              <td>{ planet.gravity }</td>\n              <td>{ planet.terrain }</td>\n              <td>{ planet.surface_water }</td>\n              <td>{ planet.population }</td>\n              <td>{ planet.films }</td>\n              <td>{ planet.created }</td>\n              <td>{ planet.edited }</td>\n              <td>{ planet.url }</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\n\nfunction FetchAPIPlanets() {\n  const [planets, setPlanets] = useState([]);\n  const [allPlanets, setAllPlanets] = useState([]);\n  const URL = 'https://swapi-trybe.herokuapp.com/api/planets/?page=1';\n\n  useEffect(() => {\n    async function fetchPlanets() {\n      const { results } = await fetch(URL).then((resp) => resp.json());\n      setPlanets(results.sort((a, b) => ((a.name > b.name) ? 1 : +('-1'))));\n      setAllPlanets(results.sort((a, b) => ((a.name > b.name) ? 1 : +('-1'))));\n    }\n    fetchPlanets();\n  }, []);\n  return [planets, allPlanets, setAllPlanets];\n}\n\nexport default FetchAPIPlanets;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetContext from './PlanetContext';\nimport FetchAPIPlanets from '../hooks/usePlanetHook';\n\nexport default function PlanetProvider({ children }) {\n  const [planets, allPlanets, setAllPlanets] = FetchAPIPlanets();\n\n  const [nameInput, setNameInput] = useState([allPlanets]);\n  const [classification, setClassification] = useState(\n    ['population', 'orbital_period', 'diameter', 'rotation_period',\n      'surface_water'],\n  );\n\n  const [comparisson, setComparisson] = useState([\n    'maior que', 'menor que', 'igual a',\n  ]);\n\n  const [columnCompValue, setColumnCompValue] = useState({\n    column: 'population',\n    comparison: 'maior que',\n    value: 0,\n  });\n\n  const [filterValues, setFilterValues] = useState({\n    filterByNumericValues: [],\n  });\n\n  function onInputChange({ target }) {\n    setNameInput(target.value);\n  }\n\n  useEffect(() => {\n    setColumnCompValue({\n      ...columnCompValue,\n      column: classification[0],\n    });\n  }, [classification]);\n\n  useEffect(() => {\n    setAllPlanets(planets.filter((planetName) => planetName.name.includes(nameInput)));\n  }, [nameInput]);\n\n  const onClassifcChange = ({ target }) => {\n    const { value, name } = target;\n    setColumnCompValue({\n      ...columnCompValue,\n      [name]: value,\n    });\n  };\n\n  function filteredByClassification() {\n    return filterValues.filterByNumericValues\n      .forEach(({ comparison, column, value }) => {\n        const filters = allPlanets\n          .filter((planet) => {\n            switch (comparison) {\n            case 'menor que':\n              return Number(planet[column]) < Number(value);\n            case 'maior que':\n              return Number(planet[column]) > Number(value);\n            case 'igual a':\n              return Number(planet[column]) === Number(value);\n            default:\n              return [];\n            }\n          });\n        setAllPlanets(filters);\n      });\n  }\n\n  useEffect(() => {\n    filteredByClassification();\n  }, [filterValues]);\n\n  function deleteFilteredButton({ target }) {\n    const deleteHere = filterValues.filterByNumericValues\n      .find((elem) => elem.column === target.parentNode.parentNode.id);\n\n    setFilterValues({\n      ...filterValues,\n      filterByNumericValues: [\n        ...filterValues.filterByNumericValues\n          .filter((elem) => elem !== deleteHere),\n      ],\n    });\n    setAllPlanets(planets);\n    setClassification([...classification, target.parentNode.parentNode.id]);\n  }\n\n  const [orderBy, setOrderBy] = useState({\n    order: {\n      column: 'population',\n      sort: 'ASC',\n    },\n  });\n\n  const [columnClassf, setColumnClassf] = useState('');\n\n  function onOrderFilterChange({ target }) {\n    setColumnClassf(target.value);\n    setOrderBy({\n      ...orderBy,\n      order: {\n        ...orderBy.order,\n        column: target.value,\n      },\n    });\n  }\n\n  const [ascDesc, setAscDesc] = useState('ASC');\n\n  function sortFilter({ target }) {\n    setAscDesc(target.id);\n    setOrderBy({\n      ...orderBy,\n      order: {\n        ...orderBy.order,\n        sort: target.id,\n      },\n    });\n    const planetsSorted = allPlanets.sort((a, b) => {\n      const hold = orderBy.order.column;\n      // IM LEAVING THIS COMMENTS FOR FUTURE ANALISYS\n      // if (orderBy.order.sort === 'ASC') {\n      //   if (a[hold] > b[hold]) {\n      //     return a[hold] - b[hold];\n      //   }\n      //   if (a[hold] < b[hold]) {\n      //     return b[hold] - a[hold];\n      //   }\n      //   return 0;\n      // }\n      switch (hold) {\n      case 'ASC':\n        return a[hold] > b[hold] ? a[hold] - b[hold] : b[hold] - a[hold];\n      case 'DESC':\n        return a[hold] > b[hold] ? b[hold] - a[hold] : a[hold] - b[hold];\n      default:\n        return 0;\n      }\n      // return Number('-1');\n    });\n\n    setAllPlanets(planetsSorted);\n  }\n\n  const [planetsOrderFilter, setPlanetsOrderFilter] = useState([]);\n  const [clickCounter, setClickCounter] = useState(0);\n\n  function buttonSortByOrder() {\n    let planetsSorted = [];\n    if (orderBy.order.sort === 'ASC') {\n      planetsSorted = allPlanets\n        .sort((a, b) => a[orderBy.order.column] - b[orderBy.order.column]);\n    }\n    if (orderBy.order.sort === 'DESC') {\n      planetsSorted = allPlanets\n        .sort((a, b) => b[orderBy.order.column] - a[orderBy.order.column]);\n    }\n\n    setPlanetsOrderFilter(planetsSorted);\n    setClickCounter(clickCounter + 1);\n  }\n\n  useEffect(() => {\n    setAllPlanets(planetsOrderFilter);\n  }, [clickCounter]);\n\n  function createDeleteButton() {\n    return (\n      <div>\n        {filterValues.filterByNumericValues.map((elem) => (\n          <div key={ elem.column } id={ elem.column }>\n            <label htmlFor=\"deleteButton\" data-testid=\"filter\">\n              <span>{elem.column}</span>\n              <span>{elem.comparison}</span>\n              <span>{elem.value}</span>\n              <button\n                type=\"button\"\n                name=\"button\"\n                id=\"deleteButton\"\n                onClick={ (event) => deleteFilteredButton(event) }\n              >\n                X\n              </button>\n            </label>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  function onButtonFilter() {\n    setFilterValues({\n      ...filterValues,\n      filterByNumericValues: [\n        ...filterValues.filterByNumericValues, columnCompValue,\n      ],\n    });\n    setClassification([\n      ...classification.filter((columnClass) => columnClass !== columnCompValue.column),\n    ]);\n\n    createDeleteButton();\n  }\n\n  const contextValue = {\n    planets,\n    onInputChange,\n    onClassifcChange,\n    filteredByClassification,\n    classification,\n    setClassification,\n    setColumnCompValue,\n    columnCompValue,\n    onButtonFilter,\n    comparisson,\n    setComparisson,\n    filterValues,\n    allPlanets,\n    createDeleteButton,\n    onOrderFilterChange,\n    columnClassf,\n    sortFilter,\n    ascDesc,\n    buttonSortByOrder,\n    filterByName: {\n      name: nameInput,\n    },\n  };\n\n  return (\n    <div>\n      <PlanetContext.Provider value={ contextValue }>\n        { children }\n      </PlanetContext.Provider>\n    </div>\n  );\n}\n\nPlanetProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React from 'react';\nimport './App.css';\nimport Table from './components/Table';\nimport PlanetProvider from './context/PlanetProvider';\n\nfunction App() {\n  return (\n    <PlanetProvider>\n      <Table />\n    </PlanetProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}